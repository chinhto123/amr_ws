// Generated by gencpp from file opencv_services/box_and_target_positionResponse.msg
// DO NOT EDIT!


#ifndef OPENCV_SERVICES_MESSAGE_BOX_AND_TARGET_POSITIONRESPONSE_H
#define OPENCV_SERVICES_MESSAGE_BOX_AND_TARGET_POSITIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace opencv_services
{
template <class ContainerAllocator>
struct box_and_target_positionResponse_
{
  typedef box_and_target_positionResponse_<ContainerAllocator> Type;

  box_and_target_positionResponse_()
    : box_position()
    , target_position()  {
    }
  box_and_target_positionResponse_(const ContainerAllocator& _alloc)
    : box_position(_alloc)
    , target_position(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _box_position_type;
  _box_position_type box_position;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _target_position_type;
  _target_position_type target_position;





  typedef boost::shared_ptr< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct box_and_target_positionResponse_

typedef ::opencv_services::box_and_target_positionResponse_<std::allocator<void> > box_and_target_positionResponse;

typedef boost::shared_ptr< ::opencv_services::box_and_target_positionResponse > box_and_target_positionResponsePtr;
typedef boost::shared_ptr< ::opencv_services::box_and_target_positionResponse const> box_and_target_positionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::opencv_services::box_and_target_positionResponse_<ContainerAllocator1> & lhs, const ::opencv_services::box_and_target_positionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.box_position == rhs.box_position &&
    lhs.target_position == rhs.target_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::opencv_services::box_and_target_positionResponse_<ContainerAllocator1> & lhs, const ::opencv_services::box_and_target_positionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace opencv_services

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e4dc1312c08dfa2b45c73a3b17d973d";
  }

  static const char* value(const ::opencv_services::box_and_target_positionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e4dc1312c08dfa2ULL;
  static const uint64_t static_value2 = 0xb45c73a3b17d973dULL;
};

template<class ContainerAllocator>
struct DataType< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opencv_services/box_and_target_positionResponse";
  }

  static const char* value(const ::opencv_services::box_and_target_positionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point box_position\n"
"geometry_msgs/Point target_position\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::opencv_services::box_and_target_positionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.box_position);
      stream.next(m.target_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct box_and_target_positionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opencv_services::box_and_target_positionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opencv_services::box_and_target_positionResponse_<ContainerAllocator>& v)
  {
    s << indent << "box_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.box_position);
    s << indent << "target_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.target_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENCV_SERVICES_MESSAGE_BOX_AND_TARGET_POSITIONRESPONSE_H
